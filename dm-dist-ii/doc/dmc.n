.ce 4
Valhalla v2.01
-- The New and Improved Database Format --
A Pre-release description
Comments to quinn@freja.diku.dk

NAME

dmc - DikuMUD database-compiler.

SYNOPSIS

dmc [-v] [-m] [-s] pathname ...

DESCRIPTION

Dmc is the databse-compiler for DikuMUD (Version 2 and later). It takes as
input a number of source files, and produces a corresponding
number of binary datafiles, in a format readable by the
DikuMUD-server.
.id 0

FILENAMES

A sourcefile should have a filename ending in '.zon'. Files
ending in '.zon.Z' are assumed to be compressed, and are piped
through 'zcat' before processing. Output is placed in files with
corresponding filenames, and the suffixes '.data' and '.reset'.

OPTIONS

The argument string is processed from left to right. Options may
appear between filenames, but it should be noted that an
option only takes effect when it is encountered. In most cases,
options should be placed to the left of the filename arguments.

-v Verbose output.

-m Make option. Only compile sourcefiles if they have been modified
more recently than the corresponding output files.

-s Suppress the generation of output files.

GENERAL CONCEPT

The new database format is designed to improve the system on two factors:
Runtime efficiency and user-friendliness (ease of building). The
second part is achieved through the use of a format that imitates
a series of data assignments in a high-level programming
language.  To prevent this higher-level format from affecting the
performance of the game, the data files are 'compiled' into a
binary format that is easily read by the server program. In some
cases, it is possible to store data directly in the structures
used by the server; Thus, data can be read and assigned in a
single operation. Symbolic names are used for all
data-fields.  The Compiler is able to supply default values for
most fields, so the builder frequently only needs to define a few
key values.
All units will be referred to by
symbolic, user-selected names within the source files, improving
readability. The compiler will filter the input files through the
C-preprocessor, allowing builders to benefit from the use of
included files and macro definitions. Predefined macros for often-used
values and names will be automatically included. Each 'zone' of the game
will be contained in one single file, making the process of
using constructors from foreign sites considerably more
attractive.

The C-PREPROCESSOR

If you're already familiar with this program, you can skip this
section. If not, this is a brief outline of the most important
functions. For details, consult a C-manual (or man cpp).

MACRO SUBSTITUTION

For our purposes, this is the most powerful feature of the
preprocessor. It allows you to enter lines like:

#define DIRTFLOOR {UNIT_FL_NO_WEATHER, UNIT_FL_CAN_BURY}

(note that the '#' must be in column one)

Then, later on in the text, you can write:

flags {DIRTFLOOR, UNIT_FL_SPEC_TICK}

The preprocessor will substitute the 'macro' resulting in:

flags {{UNIT_FL_NO_WEATHER, UNIT_FL_CAN_BURY}, UNIT_FL_SPEC_TICK}

Another function, #include, allows you to include other files in
your zone description. Files containing macro definitions for the
most important values are automatically included.

In addition, of course, the preprocessor permits you to put
comments enclosed in /* ... */ anywhere in your file - increasing
the readability.

THE ZONE FILES (data format)

Spaces, Htabs, and linefeeds are considered whitespace and
ignored.

A zonefile is split up into 5 sections. A zone-declaration section,
a mobile (NPC) section, an object section, a room section, and a
reset section. None of the sections actually have to be in the file,
and they may appear in any order.

Each section is preceded by a section header. These are the five
possible headers:

%zone
.br
%rooms
.br
%mobiles
.br
%objects
.br
%reset
.br

The first four sections may be considered lists of definitions.
The last section is can be considered a program in a simple
programming language.

A definition takes the general form:

.ce 1
field value

Where field is the name of a data field, and value is some value.
Values are of one of 5 types:

Number: A (possibly hexa-) decimal integer, possibly prepended by
a '-'. Hexadecimal numbers are on the normal C-style format (eg.
0x0f3). Hexadecimal digits may be in lower or upper case.

String: A string of characters enclosed in '"'s. Newlines may
appear in the string.

Stringlist: Either a single string (see above), or a construction
like:

.ce 1
{ "cityguard", "guard" }

NOTE: A stringlist is used to provide a unit with one or more
names by which the players can refer to it. Due to the way the
parser works, there are some important considerations to make
when writing a stringlist.
.br
   An obvious namelist for, say, a small dwarf would be:

names {"small", "small dwarf", "dwarf"}

However, if a player were to type:

hit small dwarf with bottle,

The parser would assume that "small" was the name of the dwarf, and
that "dwarf bottle" was the weapon to be used.

Thus, if one name can form a prefix for another in this style, it
should be placed AFTER that name, eg:

names {"small dwarf", "small", "dwarf"}

Note also that the name "small" is really a very questionable way
of referring to a small dwarf, and that maybe "small dwarf" and
"dwarf" should be left as the only alternatives.

Flags: Either a single number, or a list like:

.ce 1
{8, 16, 1, 128}

A list like the above has the effect of binary ORing each member
of the list together. Thus, the list above wouldhave the value
153.
.br
   Actually, one would rarely see lists like the above; macro
definitions are supplied for all of the commonly-used flag
values. Thus, you might see:

.ce 1
uflags {UNIT_FL_NO_WEATHER, UNIT_FL_CAN_BURY}

in the definition for a room with a dirt floor.

the '{'...'}' pairs may be nested, to ease the creation of macros
with multi-flag values.

Symbol: Either a standard C-style identifier, denoting some unit
within the zone, or two identifiers, separated by a @ or a /, to
reference a unit in a different zone. The format is:

<unit-ident> @ <zone-ident>

or:

<zone-ident> / <unit-ident>

The two versions are interchangeable, but it is probably wise to
stick to one format within a single zonefile in order to maintain
readability.
.br
   The usual care should be applied when choosing identifiers -
they should be easy to remember and eay to type - especially for
objects that're to be frequently loaded 'manually', eg. by immortals
within the game.

Below are descriptions for each of the sections.

ZONE section

The Zone-section defines the global parameters for the current
zone. It is usually wise to place this section in the top of the
file. The fields and their formats are as follows:


lifespan <number>
.br
This defines the interval between resets for this zone, in
minutes. Default is 60.

reset <number>
.br
This should be set to one of the macros RESET_NOT, RESET_IFEMPTY, RESET_ANYHOW.
Default is RESET_ANYHOW, which means that the zone will be reset even
if players are present within it.

creators <stringlist>
.br
This should contain the MUD names of the creators of the zone. Filling out
this field will enable immortals to see who to contact in case of zone
problems. It also gives the possibility for directing errors to you
directly via mud-mail. Seen via the 'stat zone' mud-command.

notes <string>
.br
This is a plain text description of the zone for other immortals. 
Seen via the 'stat zone' mud-command. It is often a good idea to
include your e-mail address in the notes so that you can be reached
easily by the implementors.

<symbol>
If existing, this entry defines the name of the zone. Default is
the trailing component of the current filename, minus the
trailing ".zon".

ROOM section

This section defines the rooms in the zone. Each room consists of
a symbol, which is the identifier of the room; a number (possibly
zero) room fields, and a trailing 'end', to mark the end of the
room.

The fields are as follows:

movement <number>
.br
How hard it is to walk in and out of the room. The possible values
are defined and described in values.h, and have SECT_ prefixes.

romflags <flags>
.br
Special flags for this room (room/object/mobile-flags; hence the
name). The values are defined in values.h, and have the prefix ROOM_FL_.

exit[<number>] to <symbol>, key <symbol>, keyword <stringlist>,
.br
open <flags>, descr <string> ;
.br

At least one of the subfields must be defined, and they may
appear in any order. The separating commas are optional, whereas
the trailing semicolon must be present.

The macros NORTH, SOUTH, EAST, WEST, UP, and DOWN denote the
exits. Further, the macros north, south, east, west, up, down
(lowercase) are supplied. The macro north is defined to
exit[NORTH], etc. A valid exit definition is thus:

exit[NORTH] to temple@midgaard keyword "temple";

or:

north to temple@midgaard keyword "temple";

(note that the '{' and '}'s are not needed for the stringlist, if
it contains only a single string.)

The keywords can be used, for example, for the 'enter'-command
in the game (eg, "enter shop").

The description is seen by a player which tries to look in that
direction. If none is defined, he/she sees "You see nothing of
interest.", or some such string.

the to-field says which room the exit leads to (it may be in
another zone). If it is left undefined, the exit is 'blocked'.

The flags for the open-subfield are defined in values.h, and have
EX_ prefixes.

The key defines the key which can lock/unlock this door. If none
is defined, the door cannot be locked/unlocked.

UNIT-fields

In addition to the standard room-fields, each unit
(room/mobile/object) has a common set of fields. These are
described below:

names <stringlist>
.br
The namelist of the unit. Default is a list consisting of a
single name, namely the identifier of the unit. See the
discussion about stringlists above.

title <string>
.br
For rooms  : the string shown before the long description, eg.
"The Temple".
.br
For objects: eg. "an apple", "a dagger", etc.
.br
For mobiles: eg. "the dragon", "the dwarf", "Fido", etc.

Please be conscious of the capitalization of these strings:
Whereas the title of a room should often contain leading capital
letters, this is rarely the case for mobiles and objects. An
exception is a monster like "Puff".
.br
   Default is the first name of the namelist.

descr <string>
.br
The long-description of the unit. Again, this is treated somewhat
differently for the various kinds of units.

For rooms: The description people see when they stand in the room
(unless they're in compact mode).
.br
For mobiles: What people see of a mobile if it's in its default
position, Eg. "A big ugly troll looms before you.". 
.br
For objects: What people see when the object is lying in the
room.

extra <stringlist> <string>
Adds an extra-description to the unit. An arbitrary number may
exist in any unit. An empty stringlist ('{}') matches the
namelist of the current unit. Hence, if you want to tag a
description to the name(s) of a unit, this is a good shorthand.

key <symbol>
.br
The object necessary to lock/unlock this unit. Eg:

   key goldkey@midgaard

open <flags>
.br
Some characteristics related to containers. The flags are the
same as for room-exits (the EX_ prefix macros).

manipulate <flags>
.br
Flags describing the handling-characteristics of the unit. The
flags are defined in values.h, with MANIPULATE_ prefixes.

minv <level 1..255>
.br
The level for which this unit is invisible. Default is zero.

flags <flags>
.br
Flags describing the unit. The values have the prefix UNIT_FL_
(see values.h)

weight <number>
.br
The weight of the unit.

capacity <number>
.br
The carrying-capacity of the unit.

special <number> text <string> time <number> bits <bitfield>
.br
The number of a special routine to associate with this mobile.
An arbitrary number of special routines may be associated with a
mobile. The text-field is optional. If included, it sets the
data-field associated with that function. Note that only some
functions use the data-field, and that others elect to set it
themselves. An example of a special-routine that uses a
text-string stored in the data-field is SFUN_RANSAY, which, at
random intervals, feeds the text to the 'say'-command.
The <time> specifies how often the special routine is activated
on an event-basis (0 if only commands and the like) and the bits
specify variability of the time field (see values.h SFB_XXX). Eg:

special RANSAY text "Oh my god, it is full of stars!"
	time WAIT_SEC*60 bits SFB_TIME1

This would cause activation of the special routine every 60 seconds
in the random interval described for SFB_TIME1 in values.h. The time
should never be set to less than WAIT_SEC*3 (3 seconds) unless zero.
The possible special routines are defined in the file values.h
and have a SFUN_ prefix along with the SFB_ macros.



-----------------------------

OBJECT fields

action <string>
.br
The 'action-description'. Currently, this string is only used to
contain the text on notes.

value[<number>] <flags>
.br
This sets the element of the value-array associated with
objects. The standard uses of this array are described elsewhere.

spell[<number>] <number>
.br
Associate a spell with this object. The spell-types (to be used as
index) are defined in values.h, with the prefix SPL_. The macro
MSET_SPELL() should be used for this purpose.

cost <number>
.br
The standard price for this object. Used by shops.

rent <number>
.br
The cost for storing this object for one day. See the document wpn_arm
for a description of rent with associated items.

type <number>
.br
The type of object. The values are defined in values.h with the
ITEM_ prefix.

romflags <flags>
.br
Object flags. The values are defined in values.h with a OBJ_
prefix.


MOBILE fields

mana <number>
.br

hit <number>
.br
Hitpoints.

gold <number>
.br
Wallet size.

exp <number>
.br
Experience.
A value of 0% .. 200%. See the monster document for further explanation.
Default is 100%.

alignment <number>
.br
The alignment of a monster, -1000 is most evil, 0 is neutral, +1000 is
most good. Any value in [-1000..-350] is considered evil. Any value in
[+350..+1000] is considered good. Values in between are neutral. Deafult
is 0.

sex <number>
.br
Gender, one of these:

SEX_NEUTRAL
.br
SEX_MALE
.br
SEX_FEMALE
.br

(defined in values.h)

level <number>
.br

height <number>
.br
The height of the monster in centimeters. One centimeter = 0.3937 inches,
and 1 inch = 2.54 cm.

race <number>
.br
Race. Values defined in values.h with the RACE_ prefix.

attack <number>
.br
Attack type. Values defined in values.h with the prefix WPN_.

position <number>
.br
default <number>
.br
The position and default position of the mobile. Values are in
values.h - prefix POSITION_. When a monster is loaded it is put in
the position 'position'. When the monsters position equals 'default'
the 'descr' text will be shown to players, otherwise the monsters
title along with current position information is displayed.

npcflags <flags>
.br
Mobile flags - defined in values.h; prefix NPC_.

romflags <flags>
.br
Character flags - defined in values.h; prefix CHAR_.

hand <number>
.br
A measure for how much damage the mobile can do with its bare
hand (or tentacles). See the monster and wpn_arm document for
a detailed discussion of this attribute.

ability [<number>] <number>
.br
Set an ability-value. The Ability-types (to be used as index) are
defined in values.h, with the prefix ABIL_. See the monster and
wpn_arm document for
a detailed discussion of this attribute.


weapon [<number>] <number>
.br
Set the skill in the usage of a certain weapon. Weapon-types are
defined in values.h - prefix WPN_. Use the available MSET_WEAPON macro.
See the monster and wpn_arm document for a detailed discussion of this
attribute.

spell [<number>] <number>
.br
Set the mobile's knowledge of a certain spell. Spell-types are
defined in values.h with the prefix SPL_.
Use the available MSET_SPELL macro.
See the monster and wpn_arm document for a detailed discussion of this
attribute.

-----------------------------

RESET fields

Any reset command may be preceeded by a pair of curly brackets {}
containing more reset commands. The commands inside the brackets
will only be executed in case the associated command was successful.

load udgaard/fido into midgaard/temple max 1
.br
{
.br
   load bone
.br
   load escrement into midgaard/temple
.br
   load bag
.br
   {
.br
      load apple
.br
   }
.br
}

The above example would load 'fido' into the temple, and if successful
(i.e. if the max has not been exceeded) then it would nest into the
brackets load a bone (in fido's inventory), load an escrement into the
temple (same room as fido), load a bag (into fido) and put an apple
inside the bag.

max <num>
.br
This command is always part of another reset command (load, equip, etc.).
At reset time the entire world is scanned for occurences of the loaded
unit - only if the currently existing number is less than <num> will the
command be executed.

local <num>
.br
This command is always part of another reset command (load, equip, etc.).
At reset time the location of which the unit is to be loaded into is
scanned for occurences of the loaded
unit - only if the currently existing number is less than <num> will the
command be executed.

zonemax <num>
.br
This command is always part of another reset command (load, equip, etc.).
At reset time the entire zone being reset is scanned for occurences of the
loaded unit - only if the currently existing number is less than <num> will
the command be executed.

load <symbol1> [into <symbol2>] [max <num>] [zonemax <num>]
[local <num>] [complete]
.br
Loads the unit <symbol1> into the location <symbol2>. If the load command
is nested, the into <symbol2> defaults to the unit which the command is
inside. The complete flag is specified later.

equip <symbol> position <num> [max <num>] [complete]
.br
Command is always used nested inside a loaded mobile to equip the object
<symbol> on the mobile. Position can be any macro value WEAR_ from values.h.

follow <symbol> [max <num>] [zonemax <num>] [local <num>] [complete]
.br
Command is always used nested inside a loaded mobile to force the mobile
<symbol> to follow the mobile.

door <symbol> <num> <flags>
.br
The command is used to reset door status. In the room <symbol> the door
in the direction <num> gets its flags set to <flags>. (Use the macros
NORTH, EAST, SOUTH, WEST, UP and DOWN for <num> and the EX_ macros for
the flags).

purge <symbol>
.br
Inside the room <symbol> all units are purged from existence.

remove <symbol1> in <symbol2>
.br
Removes all occurences of <symbol1> in the room <symbol2>.

complete
.br
Some of the above specified commands may be preceeded by the complete
flag. In the case where this flag is set, the unit is only loaded in
case all immediate commands inside its nesting are executed successfully.
For example:


load captain into jail_room complete
.br
{
.br
   equip magic_sword position WEAR_WIELD max 1
.br
   load bag
.br
   {
.br
      load ruby_ring max 1
.br
   }
.br
}

In this case the captain is only loaded if the objects magic_sword and bag
are successfully loaded. In case the ruby_ring is not loaded this will have
no effect on the complete flag. To make the ruby_ring affect to captains
complete flag, the bag must also have specified a complete flag (becuase
the bag would then not be complete, and thus the captain would not be
complete).
